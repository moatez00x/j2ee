package interfaces;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.TextField;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import entities.Bills;
import entities.Client;
import entities.Product;
import entities.Purchse;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import servicefacture.FactureRemote;
import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class DevisController implements Initializable{
	@FXML
	private ComboBox<String> produit;
	@FXML
	private TextField qntity;
	@FXML
	private TextField unitprice;
	@FXML
	private TextField totalbefore;
	@FXML
	private TextField tva;
	@FXML
	private TextField total;
	@FXML
	private TextField ClientCin;
	@FXML
	private Label idoperator;
	@FXML
	private Label quantityleft;
	@FXML
	private Button cost;
	@FXML
	private Button pay;
	@FXML
	private TableView<Purchse> sales;
	@FXML
	private TableColumn<Purchse,String> item;
	@FXML
	private TableColumn <Purchse,Integer>tabquantity;
	@FXML
	private TableColumn <Purchse,Float>amountbefore;
	@FXML
	private TableColumn <Purchse,Float>finalamount;
	@FXML
	private Button print;
	@FXML
	private Button delete;
	@FXML
	private ImageView back;
	
	
	
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
	
		
		try {
			
			
			
			//--------------------------------------
			Context context;
			context = new InitialContext();
			String j2 = "/CRM-ear/CRM-ejb/Facture!servicefacture.FactureRemote";
			FactureRemote s= (FactureRemote) context.lookup(j2);
			
			//--------------------------------------------------------
			ArrayList<String> a=new ArrayList();
			   for(Product l :s.listproduit()){
	               // libsNoms.add(Integer.toString(l.getNum_vol())+l.getCompagnie
	         //---------------Combobox fill------------------------------
	          a.add(l.getName());
	          ObservableList<String> Prodlist =FXCollections.observableArrayList(a);
				produit.setItems(Prodlist);
				//---------------Table view fill--------------------------------------
				List<Purchse> prod= new ArrayList();
				prod=s.listpurchase();
				
				ObservableList<Purchse> OL = FXCollections.observableArrayList(prod);
				
				sales.setItems(OL);
				item.setCellValueFactory(new PropertyValueFactory<>("item"));
				tabquantity.setCellValueFactory(new PropertyValueFactory<>("quantity"));
				amountbefore.setCellValueFactory(new PropertyValueFactory<>("amountbeforetaxe"));
				finalamount.setCellValueFactory(new PropertyValueFactory<>("total"));
				
			  
			   }
			
			
			
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
			
	}
	// Event Listener on Button[#cost].onMouseClicked
	@FXML
	public void calculate(MouseEvent event) throws NamingException {
		// TODO Autogenerated
		Context context;
		context = new InitialContext();
		String j2 = "/CRM-ear/CRM-ejb/Facture!servicefacture.FactureRemote";
		FactureRemote s= (FactureRemote) context.lookup(j2);
		   for(Product l :s.listproduit()){
               // libsNoms.add(Integer.toString(l.getNum_vol())+l.getCompagnie
         
		
			   
			   if(qntity.getText().equals(""))
			   {
				   Alert alert = new Alert(AlertType.INFORMATION);
				   alert.setTitle("Information Dialog");
				   alert.setHeaderText(null);
				   alert.setContentText("You have to fill quanitity!");
				   alert.showAndWait();
				  qntity.setStyle("-fx-control-inner-background:FFB9CE;");
			   }
			 
			   
			   else{
				   if(  (int)Integer.parseInt(qntity.getText()) > (int)l.getQuantity())
				   {
					
					  qntity.setStyle("-fx-control-inner-background:FFB9CE;");
				   }
				   else { 
					   qntity.setStyle("-fx-control-inner-background:white;");
				   float initialprice= Integer.parseInt(qntity.getText()) * Float.parseFloat(unitprice.getText());
				   totalbefore.setText(String.valueOf(initialprice));
				   double tva= initialprice-(initialprice*0.7);
		
				   total.setText(String.valueOf(initialprice+tva));
				   }
			   		}
		   }
	}
	// Event Listener on Button[#pay].onMouseClicked
	@FXML
	public void payment(MouseEvent event) throws NamingException, IOException {
		// TODO Autogenerated
		Client c=new Client();
		Context context;
		context = new InitialContext();
		
		String j2 = "/CRM-ear/CRM-ejb/Facture!servicefacture.FactureRemote";
		FactureRemote s= (FactureRemote) context.lookup(j2);
		
		   if(qntity.getText().equals(""))
		   {
			   Alert alert = new Alert(AlertType.INFORMATION);
			   alert.setTitle("Information Dialog");
			   alert.setHeaderText(null);
			   alert.setContentText("You have to fill quanitity!");
			   alert.showAndWait();
			  qntity.setStyle("-fx-control-inner-background:FFB9CE;");
		   }
		   if(total.getText().equals(""))
		   {
			   Alert alert = new Alert(AlertType.INFORMATION);
			   alert.setTitle("Information Dialog");
			   alert.setHeaderText(null);
			   alert.setContentText("Calculate Cost First!");
			   alert.showAndWait();
			  
		   }
		   else if(ClientCin.getText().equals(""))
		   {
			   Alert alert = new Alert(AlertType.INFORMATION);
			   alert.setTitle("Information Dialog");
			   alert.setHeaderText(null);
			   alert.setContentText("You have to fill cin information!");
			   alert.showAndWait();
			   ClientCin.setStyle("-fx-control-inner-background:FFB9CE;");
		   }
		   else if(ClientCin.getText().length()!=8)
		   {
			   Alert alert = new Alert(AlertType.INFORMATION);
			   alert.setTitle("Information Dialog");
			   alert.setHeaderText(null);
			   alert.setContentText("Cin have to be 8 lenght!");
			   alert.showAndWait();
			   ClientCin.setStyle("-fx-control-inner-background:FFB9CE;");
		   }
		  
		   else if (s.findClientbyCin(Integer.parseInt(ClientCin.getText()), s.findOperatorbyid(Integer.parseInt(idoperator.getText())))==null)
		   		{	
			   Alert alert = new Alert(AlertType.INFORMATION);
			   alert.setTitle("Information Dialog");
			   alert.setHeaderText(null);
			   alert.setContentText("Client not found!");
			   alert.showAndWait();
			   ClientCin.setStyle("-fx-control-inner-background:FFB9CE;");
		   		}
		   else{
      
			   qntity.setStyle("-fx-control-inner-background:white;");
			   ClientCin.setStyle("-fx-control-inner-background:white;");
		//-------------------Add Purchase History---------------------------
		
		c=s.findClientbyCin(Integer.parseInt(ClientCin.getText()), s.findOperatorbyid(Integer.parseInt(idoperator.getText())));
		Purchse p= new Purchse();
		p.setTotal(Float.parseFloat(total.getText()));
		p.setAmountbeforetaxe(Float.parseFloat(totalbefore.getText()));
		p.setClient(c);
		p.setOperator(s.findOperatorbyid(Integer.parseInt(idoperator.getText())));
		p.setQuantity(Integer.parseInt(qntity.getText()));
		p.setItem(produit.getValue());
		s.addPurchase(p);
		//----------------------Update quantity------------------------
		
		  for(Product l :s.listproduit()){
            // libsNoms.add(Integer.toString(l.getNum_vol())+l.getCompagnie
      
       if(l.getName().equals(produit.getValue()))
       {
    	   
    	   int newquantity= l.getQuantity()  - Integer.parseInt(qntity.getText());
			  
       s.updateProduit(produit.getValue(), newquantity );
       }
	}
		   Alert alert = new Alert(AlertType.INFORMATION);
		   alert.setTitle("Information Dialog");
		   alert.setHeaderText(null);
		   alert.setContentText("Purchase completed!");
		   alert.showAndWait();
		   Parent root = FXMLLoader.load(getClass().getResource("Devis.fxml"));
		   pay.getScene().setRoot(root);
		   }	
	}
	// Event Listener on TableView[#sales].onMouseClicked
	@FXML
	public void selectsale(MouseEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#print].onAction
	@FXML
	public void printsale(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#delete].onAction
	@FXML
	public void deletesale(ActionEvent event) throws NamingException, IOException {
		// TODO Autogenerated
		//-----------context---------------------------------
		Context context;
		context = new InitialContext();
		String j2 = "/CRM-ear/CRM-ejb/Facture!servicefacture.FactureRemote";
		FactureRemote s= (FactureRemote) context.lookup(j2);
		//-----------------------delete operation-------------------------
		Alert alert = new Alert(AlertType.CONFIRMATION);
		alert.setTitle("Delete");
		alert.setHeaderText("Delete sale");
		alert.setContentText("Are you want to delete this sale?");

		Optional<ButtonType> result = alert.showAndWait();
		if (result.get() == ButtonType.OK){
			int data =sales.getSelectionModel().getSelectedItem().getIdpurchase();
			s.removepurchase(data);
	       Parent root = FXMLLoader.load(getClass().getResource("Devis.fxml"));
	       delete.getScene().setRoot(root);
		} else {
			 Parent root = FXMLLoader.load(getClass().getResource("Devis.fxml"));
		       delete.getScene().setRoot(root);
		    
		}
	
	}
	// Event Listener on ImageView[#back].onDragDetected
	@FXML
	public void backk(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getResource("Bills.fxml"));
		   back.getScene().setRoot(root);
	}
	@FXML
	public void combochange(ActionEvent event) throws NamingException {
		// TODO Autogenerated
		Context context;
		context = new InitialContext();
		String j2 = "/CRM-ear/CRM-ejb/Facture!servicefacture.FactureRemote";
		FactureRemote s= (FactureRemote) context.lookup(j2);
		
		
		  for(Product l :s.listproduit()){
              // libsNoms.add(Integer.toString(l.getNum_vol())+l.getCompagnie
        
         if(l.getName().equals(produit.getValue()))
         {  unitprice.setText(String.valueOf(l.getPrice()));
         String text= "Quantity Left: "+  l.getQuantity();
         	if (l.getQuantity()==0)
         	{
         		qntity.setEditable(false);;
         		quantityleft.setTextFill(Color.web("#e01238"));
         		quantityleft.setText(text);
         	
         	}
         	else{
         		 
                 quantityleft.setText(text);
                 quantityleft.setTextFill(Color.web("#2fff63"));
                 qntity.setEditable(true);
                 
         	}
         	
         }
		
	}
	
	
	
}
	 @FXML
	 private void quantitycontroll(KeyEvent event) {
		      char c= event.getCharacter().charAt(0);
		     if(!(Character.isDigit(c)))
		     event.consume();
		    }
	 @FXML
	 private void cincontroll(KeyEvent event) {
		      char c= event.getCharacter().charAt(0);
		     if(!(Character.isDigit(c)))
		     event.consume();
		    }
}
